#include <cmath>
#include <cstdio>
#include <vector>
#include <bits/stdc++.h>
#include <algorithm>
using namespace std;
int check(string c){
    if(c=="good"||c=="bad"||c=="wonderful"||c=="terrible"){
        return 1;
    }
    return 0;
}
map<string,int>mp;
bool cmp(string a,string b){
     if(mp[a]!=mp[b]){
        return mp[a]>mp[b];
    }
    else{
        return a<b;
    }
}
int main() {   
    string tmp;
 vector<string> se;
    while(cin>>tmp){
       if(check(tmp)){
           mp[tmp]++;
             se.push_back(tmp);
       }
      
    }
    sort(se.begin(),se.end(),cmp);
   for(auto it=se.begin();it!=se.end();it++){
       if(mp[*it]!=0){cout<<*it<<" "<<mp[*it]<<endl;mp[*it]=0;}
   }
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}

c2:

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
struct word{
    char nd[100];
    int ts;
    int stt;
};
typedef struct word word;
word a[10000];
int n=0;
int findpos(char c[]){
    for(int i=0;i<n;i++){
        if(strcmp(c,a[i].nd)==0){
            return i;
        }
    }
    return -1;
}
int check(char c[]){
    if(strcmp(c,"bad")==0||strcmp(c,"good")==0||strcmp(c,"wonderful")==0||strcmp(c,"terrible")==0) return 1;
    return 0;
}
int cmp(const void *a,const void *b){
    word *x=(word*)a;
    word *y=(word*)b;
    if(x->ts!=y->ts){
        return y->ts-x->ts;
    }
    else{
        return strcmp(x->nd,y->nd);
    }
}
int main() {
char tmp[100];
    while(scanf("%s",tmp)!=-1){
       if(check(tmp)){int pos=findpos(tmp);
        if(pos==-1){
            strcpy(a[n].nd,tmp);
            a[n].ts=1;
            a[n].stt=n;
            n++;
        }
        else a[pos].ts++;
    }
    }
    qsort(a,n,sizeof(word),cmp);
 for(int i=0;i<n;i++){
     if(a[i].ts!=0)
     printf("%s %d\n",a[i].nd,a[i].ts);
 }
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    return 0;
}
